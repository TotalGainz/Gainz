//
//  WorkoutLoggerDevApp.swift
//  Gainz
//
//  Generated by o3 â€” mission: advanced, logical, intelligently designed, world-class code.
//

import SwiftUI
import WorkoutLogger                    // Feature module
import FeatureSupport                  // Shared utilities (date formatting, unit conversion)
import AnalyticsService               // For event logging
#if DEBUG
import DevToolsMockServer             // Launches stubbed API when DEBUG_MOCK=1
#endif

/// Minimal standalone app target that boots **only** the Workout Logger feature for rapid
/// designer & QA iteration.  Launches in under 10 s with fully mocked data; no HRV or
/// velocity-tracking dependencies.
@main
struct WorkoutLoggerDevApp: App {
    // MARK: - State
    
    @StateObject private var viewModel: WorkoutViewModel
    
    // MARK: - Init
    
    init() {
        #if DEBUG
        // Spin up mock API if flag enabled
        if ProcessInfo.processInfo.environment["DEBUG_MOCK"] == "1" {
            try? MockServer.shared.start(port: 8080)
        }
        #endif
        
        // Inject stubbed session so UI always has deterministic data
        let repository = MockWorkoutRepository()
        let sampleSession = repository.makeSampleSession()
        _viewModel = .init(wrappedValue: WorkoutViewModel(session: sampleSession,
                                                          repository: repository,
                                                          analytics: .preview))
    }
    
    // MARK: - Body
    
    var body: some Scene {
        WindowGroup {
            WorkoutView(viewModel: viewModel)
                .preferredColorScheme(.dark)            // Force dark mode to match brand
                .environment(\.locale, .init(identifier: "en_US"))
                .onAppear { AnalyticsManager.shared.log(.devAppLaunched) }
        }
    }
}

// MARK: - Mock Implementations

private final class MockWorkoutRepository: WorkoutRepository {
    func makeSampleSession() -> WorkoutSession {
        WorkoutSession(id: UUID(),
                       date: .now,
                       exercises: [
                           .init(exerciseId: UUID(),
                                 name: "Barbell Bench Press",
                                 sets: sampleSets(load: 185)),
                           .init(exerciseId: UUID(),
                                 name: "Seated Cable Row",
                                 sets: sampleSets(load: 120))
                       ])
    }
    
    // Helper to create three working sets + one warm-up
    private func sampleSets(load: Double) -> [SetRecord] {
        [
            .init(id: UUID(), load: load * 0.6, reps: 10, rir: 4),
            .init(id: UUID(), load: load * 0.8, reps: 8,  rir: 2),
            .init(id: UUID(), load: load,       reps: 6,  rir: 1),
            .init(id: UUID(), load: load,       reps: 6,  rir: 0)
        ]
    }
    
    // MARK: - Unused protocol stubs
    
    func fetchActiveSession() async throws -> WorkoutSession? { makeSampleSession() }
    func save(_ session: WorkoutSession) async throws { /* no-op */ }
    func delete(_ sessionId: UUID) async throws { /* no-op */ }
}

extension AnalyticsManager {
    /// Analytics sink that prints to console rather than hitting a network.
    static let preview: AnalyticsManager = {
        let logger = AnalyticsManager()
        logger.dispatch = { event in
            #if DEBUG
            print("ðŸ§ª AnalyticsEvent:", event)
            #endif
        }
        return logger
    }()
}
